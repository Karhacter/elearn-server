using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using elearn_server.Data;
using elearn_server.Models;
using elearn_server.DTO;
using elearn_server.Request;

namespace elearn_server.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class CartController : ControllerBase
    {
        private readonly AppDbContext _context;

        public CartController(AppDbContext context)
        {
            _context = context;
        }

        // L·∫•y cart theo userId, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi
        [HttpGet("{userId}")]
        public async Task<IActionResult> GetCartByUser(int userId)
        {
            var user = await _context.Users.FindAsync(userId);
            if (user == null) return NotFound("‚ùå User kh√¥ng t·ªìn t·∫°i");

            var cart = await _context.Carts
                .Include(c => c.CartItems)
                .ThenInclude(ci => ci.Course)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null)
            {
                cart = new Cart { UserId = userId };
                _context.Carts.Add(cart);
                await _context.SaveChangesAsync();
            }

            return Ok(cart);
        }

        // T·∫°o cart cho t·∫•t c·∫£ user ch∆∞a c√≥ (d√πng 1 l·∫ßn n·∫øu user ƒë√£ t·∫°o tr∆∞·ªõc)
        [HttpPost("init-carts")]
        public async Task<IActionResult> CreateCartsForAllUsers()
        {
            var userIdsWithCart = await _context.Carts.Select(c => c.UserId).ToListAsync();
            var usersWithoutCart = await _context.Users
                .Where(u => !userIdsWithCart.Contains(u.UserId))
                .ToListAsync();

            foreach (var user in usersWithoutCart)
            {
                _context.Carts.Add(new Cart { UserId = user.UserId });
            }

            await _context.SaveChangesAsync();

            return Ok(new { message = "‚úÖ ƒê√£ t·∫°o cart cho t·∫•t c·∫£ user ch∆∞a c√≥." });
        }

        [HttpGet("user/{userId}")]
        public async Task<IActionResult> GetCart(int userId)
        {
            var cart = await _context.Carts
                .Include(c => c.CartItems)
                    .ThenInclude(ci => ci.Course)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null)
            {
                return NotFound("‚ùå Kh√¥ng t√¨m th·∫•y gi·ªè h√†ng cho user n√†y");
            }

            // D·ªØ li·ªáu DTO tr·∫£ v·ªÅ
            var cartDTO = new CartDTO
            {
                Id = cart.CartId,
                UserId = cart.UserId,
                Items = cart.CartItems.Select(ci => new CartItemDTO
                {
                    CourseID = ci.CourseID,
                    CourseTitle = ci.Course.Title,
                    Quantity = ci.Quantity,
                    Price = ci.Course.Price,
                    Discount = ci.Course.Discount,
                    Image = ci.Course.Image,
                    Subtotal = (double)(ci.Quantity * ci.Course.Price)
                }).ToList(),
                Total = cart.CartItems.Sum(ci => (double)(ci.Quantity * ci.Course.Price))
            };

            return Ok(cartDTO);
        }


        [HttpPost("add-item")]
        public async Task<IActionResult> AddToCart([FromBody] AddToCartRequest request)
        {
            // Ki·ªÉm tra user t·ªìn t·∫°i
            var user = await _context.Users.FindAsync(request.UserId);
            if (user == null) return NotFound("‚ùå User kh√¥ng t·ªìn t·∫°i");

            // Ki·ªÉm tra s·∫£n ph·∫©m t·ªìn t·∫°i
            var product = await _context.Courses.FindAsync(request.CourseID);
            if (product == null) return NotFound("‚ùå S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");

            // L·∫•y gi·ªè h√†ng c·ªßa user ho·∫∑c t·∫°o m·ªõi n·∫øu ch∆∞a c√≥
            var cart = await _context.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == request.UserId);

            if (cart == null)
            {
                cart = new Cart { UserId = request.UserId };
                _context.Carts.Add(cart);
                await _context.SaveChangesAsync(); // L∆∞u gi·ªè h√†ng m·ªõi
            }

            // N·∫øu CartItems l√† null, kh·ªüi t·∫°o n√≥
            if (cart.CartItems == null)
            {
                cart.CartItems = new List<CartItem>();
            }

            // Ki·ªÉm tra s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè ch∆∞a
            var cartItem = cart.CartItems.FirstOrDefault(ci => ci.CourseID == request.CourseID);
            if (cartItem != null)
            {
                // TƒÉng s·ªë l∆∞·ª£ng n·∫øu s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng
                cartItem.Quantity += request.Quantity;
            }
            else
            {
                // Th√™m s·∫£n ph·∫©m m·ªõi v√†o gi·ªè h√†ng
                cartItem = new CartItem
                {
                    CartId = cart.CartId,
                    CourseID = request.CourseID,
                    Quantity = request.Quantity
                };
                _context.CartItems.Add(cartItem); // ƒê·ªÉ EF t·ª± ƒë·ªông g√°n CartItemId
            }

            await _context.SaveChangesAsync();

            // T·∫°o DTO ƒë·ªÉ tr·∫£ v·ªÅ d·ªØ li·ªáu gi·ªè h√†ng
            var cartDTO = new CartDTO
            {
                Id = cart.CartId,
                UserId = cart.UserId,
                Items = cart.CartItems?.Where(ci => ci.Course != null) // Ki·ªÉm tra Product kh√¥ng null
                                  .Select(ci => new CartItemDTO
                                  {
                                      CourseID = ci.CourseID,
                                      CourseTitle = ci.Course.Title,
                                      Quantity = ci.Quantity,
                                      Price = ci.Course.Price, // Gi·ªØ ki·ªÉu decimal
                                      Discount = ci.Course.Discount,
                                      Image = ci.Course.Image,
                                      Subtotal = (double)(ci.Quantity * ci.Course.Price) // T√≠nh subtotal theo decimal
                                  }).ToList() ?? new List<CartItemDTO>(), // ƒê·∫£m b·∫£o kh√¥ng tr·∫£ v·ªÅ null n·∫øu CartItems l√† null
                Total = cart.CartItems?.Where(ci => ci.Course != null) // Ki·ªÉm tra Product kh√¥ng null
                           .Sum(ci => (double)(ci.Quantity * ci.Course.Price)) ?? 0 // T√≠nh t·ªïng c·ªông sau khi chuy·ªÉn ƒë·ªïi sang double
            };

            return Ok(new { message = "‚úÖ ƒê√£ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng", cartDTO });
        }


        [HttpPut("update-item")]
        public async Task<IActionResult> UpdateCartItem([FromBody] UpdateCartItemRequest request)
        {
            var cart = await _context.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == request.UserId);

            if (cart == null) return NotFound("‚ùå Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i");

            var item = cart.CartItems.FirstOrDefault(ci => ci.CourseID == request.CourseID);
            if (item == null) return NotFound("‚ùå S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng");

            if (request.Quantity <= 0)
            {
                _context.CartItems.Remove(item);
            }
            else
            {
                item.Quantity = request.Quantity;
            }

            await _context.SaveChangesAsync();
            return Ok(new { message = "‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m trong gi·ªè h√†ng" });
        }

        [HttpDelete("remove-item")]
        public async Task<IActionResult> RemoveItem([FromBody] RemoveCartItemRequest request)
        {
            var cart = await _context.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == request.UserId);

            if (cart == null) return NotFound("‚ùå Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i");

            var item = cart.CartItems.FirstOrDefault(ci => ci.CourseID == request.CourseID);
            if (item == null) return NotFound("‚ùå S·∫£n ph·∫©m kh√¥ng c√≥ trong gi·ªè h√†ng");

            _context.CartItems.Remove(item);
            await _context.SaveChangesAsync();

            return Ok(new { message = "‚úÖ ƒê√£ x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng" });
        }


        [HttpDelete("clear/{userId}")]
        public async Task<IActionResult> ClearCart(int userId)
        {
            var cart = await _context.Carts
                .Include(c => c.CartItems)
                .FirstOrDefaultAsync(c => c.UserId == userId);

            if (cart == null) return NotFound("‚ùå Gi·ªè h√†ng kh√¥ng t·ªìn t·∫°i");

            _context.CartItems.RemoveRange(cart.CartItems);
            await _context.SaveChangesAsync();

            return Ok(new { message = "üßπ Gi·ªè h√†ng ƒë√£ ƒë∆∞·ª£c l√†m tr·ªëng" });
        }

    }
}